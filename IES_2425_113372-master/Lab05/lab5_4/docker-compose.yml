services:
  mysqldb:
    image: mysql:5.7
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQLDB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQLDB_DATABASE}
      - MYSQL_USER=${MYSQLDB_USER}
      - MYSQL_PASSWORD=${MYSQLDB_PASSWORD}
    ports:
      - "33061:3306"
    volumes:
      - db:/var/lib/mysql
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "quotes_topic:1:1" # Added this line
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic quotes_topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
    networks:
      - app-network

  app1:
    depends_on:
      - mysqldb
      - kafka
    build: ./backend/demo
    restart: on-failure
    env_file: .env
    ports:
      - "${SPRING_LOCAL_PORT}:${SPRING_DOCKER_PORT}"
    environment:
      SPRING_APPLICATION_JSON: |
        {
        "spring.datasource.url": "jdbc:mysql://mysqldb:3306/${MYSQLDB_DATABASE}?useSSL=false&serverTimezone=UTC",
        "spring.datasource.username": "root",
        "spring.datasource.password": "${MYSQLDB_ROOT_PASSWORD}",
        "spring.jpa.hibernate.ddl-auto": "update",
        "spring.jpa.database-platform": "org.hibernate.dialect.MySQLDialect",
        "spring.kafka.consumer.bootstrap-servers": "kafka:9092",
        "spring.kafka.consumer.group-id": "quotes_group",
        "spring.kafka.consumer.auto-offset-reset": "earliest",
        "spring.kafka.consumer.key-deserializer": "org.apache.kafka.common.serialization.StringDeserializer",
        "spring.kafka.consumer.value-deserializer": "org.apache.kafka.common.serialization.StringDeserializer",
        "spring.kafka.producer.properties.spring.json.add.type.headers": "false",
        "spring.websocket.allowed-origins": ["http://localhost:3000", "http://localhost:80"]
        }
    volumes:
      - .m2:/root/.m2
    networks:
      - app-network
    stdin_open: true
    tty: true

  react-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    networks:
      - app-network
    environment:
      - REACT_APP_API_URL=http://localhost:6868
    depends_on:
      - app1

  python-producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      app1:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - API_URL=http://app1:8080/movies
    networks:
      - app-network
    restart: on-failure

volumes:
  db:


networks:
  app-network:
    driver: bridge
